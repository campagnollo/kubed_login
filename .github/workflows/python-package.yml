# .github/workflows/build-exe.yml
name: build-exe
on:
  push:
  workflow_dispatch:

jobs:
  win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt pyinstaller

      # (optional) Show where files actually are
      - name: Debug tree (top 3 levels)
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Depth 3 | Select-Object FullName

      # Find a reasonable entrypoint automatically
      - name: Locate entrypoint
        shell: pwsh
        run: |
          $candidates = @(
            'src\main.py',
            'main.py',
            'app\main.py',
            'src\mytool\__main__.py'
          ) | ForEach-Object { Join-Path $PWD $_ }
          $entry = $candidates | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $entry) {
            Write-Host "No candidate found. Found these main-like files:"
            Get-ChildItem -Recurse -File -Include main.py,__main__.py | ForEach-Object FullName
            throw "Set your correct script path (e.g. src\main.py) or adjust the candidates."
          }
          "ENTRY=$entry" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using entrypoint: $entry"

      # If you bundle config, ensure the path exists
      - name: Check add-data paths
        shell: pwsh
        run: |
          if (-not (Test-Path "config\config.yaml")) {
            Write-Warning "config\config.yaml not found; remove --add-data or fix the path."
          }
      - name: Locate entrypoint (auto-detect)
        shell: pwsh
        run: |
          # Show repo layout (first 3 levels) for debugging
          Get-ChildItem -Recurse -Depth 3 | Select-Object FullName
      
          # Gather .py files, exclude typical junk dirs
          $files = Get-ChildItem -Recurse -File -Include *.py |
            Where-Object { $_.FullName -notmatch '\\\.git\\|\\venv\\|\\\.venv\\|\\env\\|\\dist\\|\\build\\|__pycache__' }
      
          if (-not $files) { throw "No .py files found. Set an explicit entrypoint." }
      
          # Prefer files with a main guard
          $withGuard = @()
          foreach ($f in $files) {
            if (Select-String -Path $f.FullName -Pattern 'if\s*__name__\s*==\s*["'']__main__["'"]' -Quiet) {
              $withGuard += $f
            }
          }
      
          # Then prefer typical names
          $namePreferred = $files | Where-Object { $_.Name -match '(^|_)main\.py$|__main__\.py$|kubed|cli|tool|app' }
      
          $entry = ($withGuard + $namePreferred + $files) | Select-Object -Unique -First 1
          if (-not $entry) {
            throw "Couldn't locate an entrypoint. Set env ENTRYPOINT or hardcode the script path."
          }
      
          "ENTRY=$($entry.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using entrypoint: $($entry.FullName)"
      
            # Build (PowerShell; no caret continuations needed)
            - name: Build onefile exe
              shell: pwsh
              run: pyinstaller --onefile --name mytool --add-data "config\config.yaml;config" "$env:ENTRY"
      
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                name: mytool-windows
                path: dist/mytool.exe
